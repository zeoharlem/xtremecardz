<?php
/**
 * Created by PhpStorm.
 * User: HP
 * Date: 5/19/2019
 * Time: 8:12 PM
 */

namespace Multiple\Frontend\Controllers;


use Multiple\Frontend\Models\Products;
use Phalcon\Mvc\Dispatcher;
use Phalcon\Mvc\View;

class CartController extends BaseController {

    public function initialize(){
        parent::initialize(); // TODO: Change the autogenerated stub
    }

    public function indexAction(){
        if($this->request->isAjax() && $this->request->isPost()){
            $getPost    = $this->request->getPost();
            $portfolio  = $this->session->get("portfolio_items");

            $getStackRow[$getPost['item_id']]    = [
                "price"     => $getPost['price'],
                "image"     => $getPost['image'],
                "id"        => $getPost['item_id'],
                "quantity"  => $getPost['quantity'],
                "name"      => $getPost['item_title'],
                "total"     => (int)$getPost['price'] * (int)$getPost['quantity'],
                "items"     => $this->request->getPost(),
                "notes"     => $getPost['notes']
            ];

            if($this->session->has("portfolio_items")){
                //array_push($portfolio, $getStackRow);
                $this->session->set("portfolio_items", $portfolio+$getStackRow);
            }
            else{
                $this->session->set("portfolio_items", $getStackRow);
            }

            $this->response->setJsonContent([
                "status"    => "OK",
                "data"      => [
                    "itemStackRow"  => $getStackRow,
                    "postStackRow"  => $this->request->getPost()
                ]
            ])->send();
            return $this->view->disable();
        }
    }

    public function checkrequestAction(){
        if($this->session->has("portfolio_items") || $this->session->has('cart_item')){
            $getPortfolio   = $this->session->get("portfolio_items");
            $getCartItem    = $this->request->get("cart_item");
            if(!empty(array_filter($getPortfolio))){
                
            }
            if(!empty(array_filter($getCartItem))){

            }
        }
    }

    public function setproductAction(){
        if($this->request->isPost() && $this->request->isAjax()){
            $getPost    = $this->request->getPost();
            $this->cartSetKeyRowAction($getPost['product_id'], $getPost['quantity']);
            $this->response->setJsonContent([
                "status"    => "OK",
                "data"      => $this->session->get("cart_item")
            ])->send();
            return $this->view->disable();
        }
    }

    public function beforeExecuteRoute(Dispatcher $dispatcher){
        $action     = $dispatcher->getActionName();
        $controller = $dispatcher->getControllerName();
        if(($controller == "cart" && $action == "load") && $action != "notfound"){

            if(!$this->session->has("portfolio_items")){
                //var_dump($this->session->get("portfolio_items")); exit;
                return $dispatcher->forward([
                    "action"    => "notfound"
                ]);
            }
        }
    }

    public function loadAction(){
        $this->view->setVars([
            "cart_item_total"   => $this->getProductTotal(),
            "portfolio_total"   => $this->getPortfolioTotal(),
        ]);
        $this->view->setRenderLevel(View::LEVEL_AFTER_TEMPLATE);
    }

    public function checkoutAction(){
        $this->view->setVars([
            "cart_item_total"   => $this->getProductTotal(),
            "portfolio_total"   => $this->getPortfolioTotal(),
        ]);
        $this->view->setRenderLevel(View::LEVEL_AFTER_TEMPLATE);
    }

    public function notfoundAction(){
        $this->view->setRenderLevel(View::LEVEL_AFTER_TEMPLATE);
    }
    //Set up Item to be uploaded to the Database
    private function cartSetKeyRowAction($productId, $qty=""){
        $getItemProductKey  = $productId;
        $productQueryRow    = Products::findFirstByProduct_id($productId);
        $tQty               = empty($qty) ? 1 : $qty;
        $itemArrayRow   = [
            $getItemProductKey  => [
                "quantity"  => $qty,
                "id"        => $getItemProductKey,
                "name"      => $productQueryRow->title,
                "price"     => $productQueryRow->sale_price,
                "image"     => $productQueryRow->front_image,
                "total"     => $productQueryRow->sale_price * $tQty,
                "items"     => @$this->request->getPost(),
            ]
        ];

        if($this->session->has('cart_item') || !empty($_SESSION['cart_item'])){
            if(array_key_exists($productId, $this->session->get('cart_item'))) {
                foreach ($this->session->get('cart_item') as $keyRow => $valueRow) {
                    if ($productId == $keyRow) {
                        $counter = (int)$this->session->get('cart_item')[$productId]['qty'] + 1;
                        $this->session->get('cart_item')[$keyRow]['qty'] = $counter;
                    }
                }
            }
            else{
                //Do not use array function(array_merge) cos it will reassing the key value (index);
                $this->session->set('cart_item', $this->session->get('cart_item')+$itemArrayRow);
            }
        }
        else{
            $this->session->set('cart_item', $itemArrayRow);
        }
    }

    private function getTotalAmount($key){
        $amountTotal    = [];
        if($this->session->has($key)){
            foreach($this->session->get($key) as $key => $value){
                $amountTotal[]  = $value['price'] * $value['quantity'];
            }
            return array_sum($amountTotal);
        }
        return array_sum($amountTotal);
    }

    private function getPortfolioTotal(){
        return $this->getTotalAmount("portfolio_items");
    }

    private function getProductTotal(){
        return $this->getTotalAmount("cart_item");
    }

}