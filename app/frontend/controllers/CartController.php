<?php
/**
 * Created by PhpStorm.
 * User: HP
 * Date: 5/19/2019
 * Time: 8:12 PM
 */

namespace Multiple\Frontend\Controllers;


use Multiple\Frontend\Models\Accessories;
use Multiple\Frontend\Models\BillingRegister;
use Multiple\Frontend\Models\Order;
use Multiple\Frontend\Models\Products;
use Phalcon\Mvc\Dispatcher;
use Phalcon\Mvc\Model\Transaction\Manager;
use Phalcon\Mvc\View;

class CartController extends BaseController {

    public function initialize(){
        parent::initialize(); // TODO: Change the autogenerated stub
        $this->assets->collection("footers")->addJs("assets/js/pages/cart.js");
        @$this->session->set("totalCartItem", $this->getProductTotal());
        @$this->session->set("totalPortfolio", $this->getPortfolioTotal());
    }

    public function indexAction(){
        if($this->request->isAjax() && $this->request->isPost()){
            $getPost    = $this->request->getPost();
            $portfolio  = $this->session->get("portfolio_items");

            $getStackRow[$getPost['item_id']]    = [
                "price"     => $getPost['price'],
                "image"     => $getPost['image'],
                "id"        => $getPost['item_id'],
                "quantity"  => $getPost['quantity'],
                "name"      => $getPost['item_title'],
                "total"     => (int)$getPost['price'] * (int)$getPost['quantity'],
                "items"     => $this->request->getPost(),
                "notes"     => $getPost['notes']
            ];

            if($this->session->has("portfolio_items")){
                //array_push($portfolio, $getStackRow);
                $this->session->set("portfolio_items", $portfolio+$getStackRow);
            }
            else{
                $this->session->set("portfolio_items", $getStackRow);
            }

            $this->response->setJsonContent([
                "status"    => "OK",
                "data"      => [
                    "itemStackRow"  => $getStackRow,
                    "postStackRow"  => $this->request->getPost()
                ]
            ])->send();
            return $this->view->disable();
        }
    }

    public function checkAction(){
        if($this->session->has("regAuth")) {
            try {
                $transaction = $this->paystack->transaction->initialize([
                    "amount" => ($this->getProductTotal() + $this->getPortfolioTotal()) * 100,
                    "email" => $this->session->get("regAuth")['email'],
                    'reference' => uniqid("cr8xL")
                ]);

            } catch (\Yabacon\Paystack\Exception\ApiException $apiException) {
                print_r($apiException->getResponseObject());
                die($apiException->getMessage());
            }
            $this->session->set("transaction_reference", $transaction->data->reference);
            $this->response->redirect($transaction->data->authorization_url);
        }
        else{
            $this->response->redirect("cart/checkout?task=redirect&tok=notAllowed");
        }
        return $this->view->disable();
    }

    public function setproductAction(){
        if($this->request->isPost() && $this->request->isAjax()){

            $getPost    = $this->request->getPost();
            $boolResult = $this->cartSetKeyRowAction($getPost['accessories_id'], $getPost['quantity']);
            //var_dump($this->session->get("cart_item"));
            if(!$boolResult) {
                $this->response->setJsonContent([
                    "status"    => "OK",
                    "data"      => $this->session->get("cart_item")
                ])->send();
            }
            else{
                $this->response->setJsonContent([
                    "status"    => "ERROR",
                    "data"      => array()
                ])->send();
            }
        }
        return $this->view->disable();
    }

    public function beforeExecuteRoute(Dispatcher $dispatcher){
        $action     = $dispatcher->getActionName();
        $controller = $dispatcher->getControllerName();
        if(($controller == "cart" && $action == "load") && $action != "notfound"){

            if(!$this->session->has("portfolio_items")){
                //var_dump($this->session->get("portfolio_items")); exit;
                return $dispatcher->forward([
                    "action"    => "notfound"
                ]);
            }
        }
    }

    public function loadAction(){
        $this->view->setVars([
            "cart_item_total"   => $this->getProductTotal(),
            "portfolio_total"   => $this->getPortfolioTotal(),
            "accessories"       => $this->modelsManager->createBuilder()
                ->from("Multiple\\Frontend\\Models\\Accessories")
                ->limit(5)->orderBy("RAND()")->getQuery()->execute()
            ]);
        $this->view->setRenderLevel(View::LEVEL_AFTER_TEMPLATE);
    }

    public function checkoutAction(){
        if($this->request->isPost() && $this->request->isAjax()){
            $billingRegister    = new BillingRegister();
            if($billingRegister->create($this->request->getPost())){
                $this->session->set("regAuth", $this->request->getPost());
                $this->response->setJsonContent(
                    [
                        "status"    => "OK",
                        "data"      => $this->request->getPost(),
                        "bill_reg"  => $billingRegister->billing_register_id
                    ]
                )->send();
            }
            else{
                $this->response->setJsonContent(
                    [
                        "status"    => "ERROR",
                        "data"      => $billingRegister->getMessages()
                    ]
                )->send();
            }
            return $this->view->disable();
        }
        $this->view->setVars([
            "cart_item_total"   => $this->getProductTotal(),
            "portfolio_total"   => $this->getPortfolioTotal(),
        ]);
        $this->view->setRenderLevel(View::LEVEL_AFTER_TEMPLATE);
    }

    public function notfoundAction(){
        $this->view->setRenderLevel(View::LEVEL_AFTER_TEMPLATE);
    }

    public function paycheckedAction(){
        $cartItems  = $this->session->get("cart_item");
        $portItem   = $this->session->get("portfolio_item");
        $reference  = isset($_GET['reference']) ? $_GET['reference'] : '';

        if(!$reference){
            die('No reference supplied');
        }

        if(!$this->session->has("regAuth")){
            return $this->response->redirect("portfolio/?task=fill_form");
        }

        try{
            // verify using the library
            $tranx = $this->paystack->transaction->verify([
                'reference' => $reference,
            ]);
        } catch(\Yabacon\Paystack\Exception\ApiException $e){
            print_r($e->getResponseObject());
            die($e->getMessage());
        }

        if ('success' === $tranx->data->status) {
            // transaction was successful...
            // please check other things like whether you already gave value for this ref
            // if the email matches the customer who owns the product etc
            // Give value

            $formSubmitted  = $this->session->get("regAuth");
            $orderRowPay    = [
                "firstname" => $formSubmitted['firstname'],
                "lastname"  => $formSubmitted['lastname'],
                "phonenumber"   => $formSubmitted['phonenumber'],
                "email"         => $formSubmitted['email'],
                "address"       => $formSubmitted['address'],
                "reference"     => $reference,
            ];
            $order  = new Order();
            if($order->create($orderRowPay) != false){
                $this->flash->success("Transaction Successful");
                $this->response->redirect("cart/success?path=".$reference);
            }
            else{
                return $this->response->redirect("portfolio?task=failed");
            }
        }
    }

    public function successAction(){
        if(!$this->request->hasQuery("path")){
            return $this->response->redirect("portfolio");
        }
        $this->view->setVar("reference", $this->request->getQuery('path'));
        $this->view->setRenderLevel(View::LEVEL_AFTER_TEMPLATE);
        $this->session->destroy();
    }

    public function payAction(){

    }

    public function paymentAction(){
        if(!$this->session->has("regAuth") && !$this->request->hasQuery("token")){
            return $this->response->redirect("portfolio/?task=redirect&token=".uniqid("uMJyL"));
        }
        $this->view->setVars([
            "cart_item_total"   => $this->getProductTotal(),
            "portfolio_total"   => $this->getPortfolioTotal(),
            "accessories"       => $this->modelsManager->createBuilder()
                ->from("Multiple\\Frontend\\Models\\Accessories")
                ->limit(5)->orderBy("RAND()")->getQuery()->execute()
        ]);
        $this->view->setRenderLevel(View::LEVEL_AFTER_TEMPLATE);
    }

    //Set up Item to be uploaded to the Database
    private function cartSetKeyRowAction($productId, $qty=""){
        $getItemProductKey  = $productId;
        $productQueryRow    = Accessories::findFirstByAccessories_id($productId);
        $tQty               = empty($qty) ? 1 : $qty;
        if($productQueryRow != false) {

            $itemArrayRow = [
                $getItemProductKey => [
                    "quantity" => $tQty,
                    "id" => $getItemProductKey,
                    "name" => $productQueryRow->title,
                    "price" => $productQueryRow->price,
                    "image" => $productQueryRow->front_image,
                    "total" => $productQueryRow->price * $tQty,
                    "items" => @$this->request->getPost(),
                ]
            ];

            if ($this->session->has('cart_item') || !empty($_SESSION['cart_item'])) {
                if (array_key_exists($productId, $this->session->get('cart_item'))) {
                    foreach ($this->session->get('cart_item') as $keyRow => $valueRow) {
                        if ($productId == $keyRow) {
                            $counter = (int)$this->session->get('cart_item')[$productId]['quantity'] + 1;
                            $this->session->get('cart_item')[$keyRow]['quantity'] = $counter;
                        }
                    }
                } else {
                    //Do not use array function(array_merge) cos it will reassing the key value (index);
                    $this->session->set('cart_item', $this->session->get('cart_item') + $itemArrayRow);
                }
            } else {
                $this->session->set('cart_item', $itemArrayRow);
            }
        }
        else{
            return false;
        }
    }

    private function getTotalAmount($key){
        $amountTotal    = [];
        if($this->session->has($key)){
            foreach($this->session->get($key) as $key => $value){
                $amountTotal[]  = $value['price'] * $value['quantity'];
            }
            return array_sum($amountTotal);
        }
        return array_sum($amountTotal);
    }

    private function getPortfolioTotal(){
        return $this->getTotalAmount("portfolio_items");
    }

    private function getProductTotal(){
        return $this->getTotalAmount("cart_item");
    }

}